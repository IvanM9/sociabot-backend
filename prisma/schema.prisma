generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  first_name      String
  last_name       String
  email           String          @unique
  password        String
  birth_date      DateTime        @db.Date
  gender          String
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @db.Timestamptz(6)
  role            Role            @default(STUDENT)
  status          Boolean         @default(true)
  course_students CourseStudent[]
  courses         Course[]

  @@map("users")
}

model Lesson {
  id                String        @id @default(cuid())
  course_student_id String
  score             Int
  date              DateTime      @db.Timestamptz(6)
  observations      String
  module_id         String
  start_date        DateTime      @db.Timestamptz(6)
  end_date          DateTime      @db.Timestamptz(6)
  status            LessonStatus  @default(PENDING)
  course_students   CourseStudent @relation(fields: [course_student_id], references: [id])
  modules           Module        @relation(fields: [module_id], references: [id])

  @@map("lessons")
}

model Module {
  id         String    @id @default(cuid())
  name       String
  goals      String
  created_by String
  updated_by String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  course_id  String
  status     Boolean   @default(true)
  is_public  Boolean   @default(false)
  chats      Chat[]
  lessons    Lesson[]
  courses    Course    @relation(fields: [course_id], references: [id])

  @@map("modules")
}

model Chat {
  id                String        @id @default(cuid())
  course_student_id String
  observations      String?
  updated_by        String?
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  created_by        String?
  module_id         String
  course_students   CourseStudent @relation(fields: [course_student_id], references: [id])
  modules           Module        @relation(fields: [module_id], references: [id])
  interactions      Interaction[]

  @@map("chats")
}

model Interaction {
  id      String          @id @default(cuid())
  user    InteractionUser @default(STUDENT)
  message String
  date    DateTime        @db.Timestamptz(6)
  chat_id String
  chats   Chat            @relation(fields: [chat_id], references: [id])

  @@map("interactions")
}

model Course {
  id              String          @id @default(cuid())
  name            String
  code            String          @unique
  description     String?
  created_by      String
  updated_by      String?
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @db.Timestamptz(6)
  status          Boolean         @default(true)
  course_students CourseStudent[]
  users           User            @relation(fields: [created_by], references: [id])
  modules         Module[]

  @@map("courses")
}

model CourseStudent {
  id         String    @id @default(cuid())
  course_id  String
  student_id String
  created_by String?
  updated_by String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  status     Boolean   @default(true)
  chats      Chat[]
  courses    Course    @relation(fields: [course_id], references: [id])
  users      User      @relation(fields: [student_id], references: [id])
  lessons    Lesson[]

  @@map("course_students")
}

enum InteractionUser {
  STUDENT
  BOT
}

enum LessonStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum Role {
  STUDENT
  TEACHER
}
